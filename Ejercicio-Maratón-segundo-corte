from collections import Counter

def longitud_balanceada_mas_larga(a):
    """
    Dado un arreglo no decreciente 'a', encuentra la longitud
    de su subsecuencia balanceada más larga.
    """
    # Contar cuántas veces aparece cada número
    frecuencias = Counter(a)  # ejemplo: {1:3, 2:3, 3:2}

    # Lista de las frecuencias de cada número
    valores_frec = list(frecuencias.values())

    # Buscar la frecuencia más común (cuántas veces se repite cada frecuencia)
    max_longitud = 0
    for f in set(valores_frec):
        # Para cada frecuencia posible f,
        # sumamos los elementos que tienen esa frecuencia
        longitud = sum(freq for freq in valores_frec if freq == f)
        max_longitud = max(max_longitud, longitud)

    return max_longitud



# Programa principal

t = int(input())  # número de casos de prueba

for _ in range(t):
    n = int(input())  # longitud del arreglo
    a = list(map(int, input().split()))
    print(longitud_balanceada_mas_larga(a))
